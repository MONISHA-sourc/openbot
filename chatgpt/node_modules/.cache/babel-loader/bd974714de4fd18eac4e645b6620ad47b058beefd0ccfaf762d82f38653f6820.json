{"ast":null,"code":"var _jsxFileName = \"/Users/monishasomani/Documents/Projects/My Projects/chatgptapp/chatgpt/src/components/ChatGPTApp/ChatGPTApp.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './ChatGPTApp.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatGPTApp() {\n  _s();\n  const [question, setQuestion] = useState('');\n  const [response, setResponse] = useState('');\n  const handleSubmit = async () => {\n    if (!question.trim()) return;\n    try {\n      const response = await fetch('http://localhost:3000/ask', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          question\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      setResponse(data.answer);\n    } catch (error) {\n      console.error(\"There was an error!\", error);\n      setResponse(\"Sorry, we couldn't fetch the response. Please try again.\");\n    }\n    setQuestion('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: question,\n      onChange: e => setQuestion(e.target.value),\n      placeholder: \"Ask me anything...\",\n      rows: \"4\",\n      className: \"question-input\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      className: \"submit-btn\",\n      children: \"Ask\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"response-display\",\n      children: response\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n}\n_s(ChatGPTApp, \"zkoMqXIfZFIynyXw/mbLGqqlFmI=\");\n_c = ChatGPTApp;\nexport default ChatGPTApp;\nvar _c;\n$RefreshReg$(_c, \"ChatGPTApp\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ChatGPTApp","_s","question","setQuestion","response","setResponse","handleSubmit","trim","fetch","method","headers","body","JSON","stringify","ok","Error","status","data","json","answer","error","console","className","children","value","onChange","e","target","placeholder","rows","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/monishasomani/Documents/Projects/My Projects/chatgptapp/chatgpt/src/components/ChatGPTApp/ChatGPTApp.js"],"sourcesContent":["import React, {useState} from 'react';\nimport './ChatGPTApp.css'; \n\nfunction ChatGPTApp() {\n    const [question, setQuestion] = useState('');\n    const [response, setResponse] = useState('');\n    \n    const handleSubmit = async()=>{\n        if(!question.trim()) return;\n        try{\n            const response = await fetch('http://localhost:3000/ask', {\n                method: 'POST',\n                headers: {\n                    'Content-Type' : 'application/json' ,\n                },\n                body: JSON.stringify({question}),\n\n            });\n            if(!response.ok){\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            const data =  await response.json();\n            setResponse(data.answer);\n        }catch(error){\n            console.error(\"There was an error!\", error);\n            setResponse(\"Sorry, we couldn't fetch the response. Please try again.\");\n        }\n        setQuestion('');\n    }\n    return (\n        <div className='app-container'>\n            <textarea \n            value={question}\n            onChange={(e)=>setQuestion(e.target.value)}\n            placeholder='Ask me anything...'\n            rows='4'\n            className='question-input'\n            />\n            <button onClick={handleSubmit} className='submit-btn'>Ask</button>\n            <div className='response-display'>{response}</div>\n        </div>\n    );\n    \n}\nexport default ChatGPTApp"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAO,OAAO;AACrC,OAAO,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACO,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMS,YAAY,GAAG,MAAAA,CAAA,KAAS;IAC1B,IAAG,CAACJ,QAAQ,CAACK,IAAI,CAAC,CAAC,EAAE;IACrB,IAAG;MACC,MAAMH,QAAQ,GAAG,MAAMI,KAAK,CAAC,2BAA2B,EAAE;QACtDC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAG;QACrB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAACX;QAAQ,CAAC;MAEnC,CAAC,CAAC;MACF,IAAG,CAACE,QAAQ,CAACU,EAAE,EAAC;QACZ,MAAM,IAAIC,KAAK,CAAE,uBAAsBX,QAAQ,CAACY,MAAO,EAAC,CAAC;MAC7D;MACA,MAAMC,IAAI,GAAI,MAAMb,QAAQ,CAACc,IAAI,CAAC,CAAC;MACnCb,WAAW,CAACY,IAAI,CAACE,MAAM,CAAC;IAC5B,CAAC,QAAMC,KAAK,EAAC;MACTC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3Cf,WAAW,CAAC,0DAA0D,CAAC;IAC3E;IACAF,WAAW,CAAC,EAAE,CAAC;EACnB,CAAC;EACD,oBACIJ,OAAA;IAAKuB,SAAS,EAAC,eAAe;IAAAC,QAAA,gBAC1BxB,OAAA;MACAyB,KAAK,EAAEtB,QAAS;MAChBuB,QAAQ,EAAGC,CAAC,IAAGvB,WAAW,CAACuB,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MAC3CI,WAAW,EAAC,oBAAoB;MAChCC,IAAI,EAAC,GAAG;MACRP,SAAS,EAAC;IAAgB;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzB,CAAC,eACFlC,OAAA;MAAQmC,OAAO,EAAE5B,YAAa;MAACgB,SAAS,EAAC,YAAY;MAAAC,QAAA,EAAC;IAAG;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAClElC,OAAA;MAAKuB,SAAS,EAAC,kBAAkB;MAAAC,QAAA,EAAEnB;IAAQ;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjD,CAAC;AAGd;AAAChC,EAAA,CAxCQD,UAAU;AAAAmC,EAAA,GAAVnC,UAAU;AAyCnB,eAAeA,UAAU;AAAA,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}